birth_weight<-read.table("birtweigth_study.txt", sep= " ")
plotlist <- list()
count <- 1
df <- birth_weight
for(c in colnames(df)){
print(count)
if(is.numeric(df[1,c])){
plotlist[[count]] <-ggplot(data=df)+
geom_point(aes(x=df[,c],y=df$bwt))+
theme_bw()
} else{
plotlist[[count]] <-ggplot(data=df)+
geom_boxplot(aes(x=df[,c],y=df$bwt))+
theme_bw()
}
count <- count + 1
}
library(ggplot2);library(gridExtra)
row.names(birth_weight) <- NULL
birth_weight$lwt <- birth_weight$lwt*0.45359237
birth_weight$bwt <- birth_weight$bwt/1000
birth_plotter <- function(df){
plotlist <- list()
count <- 1
for(c in colnames(df)){
if(is.numeric(df[1,c])){
plotlist[[count]] <-ggplot(data=df)+
geom_point(aes(x=df[,c],y=df$bwt))+
theme_bw()
} else{
plotlist[[count]] <-ggplot(data=df)+
geom_boxplot(aes(x=df[,c],y=df$bwt))+
theme_bw()
}
count <- count + 1
}
return(plotlist)
}
df <- birth_weight
plotlist <- list()
count <- 1
for(c in colnames(df)){
print(count)
if(is.numeric(df[1,c])){
plotlist[[count]] <-ggplot(data=df)+
geom_point(aes(x=df[,c],y=df$bwt))+
theme_bw()
} else{
plotlist[[count]] <-ggplot(data=df)+
geom_boxplot(aes(x=df[,c],y=df$bwt))+
theme_bw()
}
count <- count + 1
}
plotlist[[2]]
plotlist <- list()
count <- 1
for(c in colnames(df)){
print(count)
if(is.numeric(df[1,c])){
plotlist[[c]] <-ggplot(data=df)+
geom_point(aes(x=df[,c],y=df$bwt))+
theme_bw()
} else{
plotlist[[c]] <-ggplot(data=df)+
geom_boxplot(aes(x=df[,c],y=df$bwt))+
theme_bw()
}
count <- count + 1
}
plotlist
plotlist[["age"]]
plotlist <- list()
count <- 1
for(c in colnames(df)){
print(count)
if(is.numeric(df[1,c])){
plotlist[[c]] <-ggplot(data=df)+
geom_point(aes_string(x=df[,c],y=df$bwt))+
theme_bw()
} else{
plotlist[[c]] <-ggplot(data=df)+
geom_boxplot(aes_string(x=df[,c],y=df$bwt))+
theme_bw()
}
count <- count + 1
}
plotlist[["age"]]
grid.arrange(grobs=birth_plotter(birth_weight),ncol=2)
birth_plotter <- function(df){  # Creating a function to plot all variables vs birth weight
plotlist <- list()  # Initiating the list that will contain plots
count <- 1  # Counter for list indexing
for(c in colnames(df)){  # Iterating over variables names
if(is.numeric(df[1,c])){  # If the variable is numeric, make a scatterplot
plotlist[[count]] <-ggplot(data=df)+
geom_point(aes_string(x=df[,c],y=df$bwt))+  # aes_string instead of aes to prevent erasing of values at last iteration
theme_bw()
} else{  # If the variable is a factor, make a boxplot
plotlist[[count]] <-ggplot(data=df)+
geom_boxplot(aes_string(x=df[,c],y=df$bwt))+
theme_bw()
}
count <- count + 1
}
return(plotlist)
}
grid.arrange(grobs=birth_plotter(birth_weight),ncol=2)
birth_plotter <- function(df){  # Creating a function to plot all variables vs birth weight
plotlist <- list()  # Initiating the list that will contain plots
count <- 1  # Counter for list indexing
for(c in colnames(df)){  # Iterating over variables names
if(is.numeric(df[1,c])){  # If the variable is numeric, make a scatterplot
plotlist[[count]] <-ggplot(data=df)+
geom_point(aes_string(x=df[,c],y=df$bwt))+  # aes_string instead of aes to prevent erasing of values at last iteration
theme_bw()+xlab(c)+ylab("Birth weight")
} else{  # If the variable is a factor, make a boxplot
plotlist[[count]] <-ggplot(data=df)+
geom_boxplot(aes_string(x=df[,c],y=df$bwt))+
theme_bw()+xlab(c)+ylab("Birth weight")
}
count <- count + 1
}
return(plotlist)
}
grid.arrange(grobs=birth_plotter(birth_weight),ncol=2)
birth_plotter <- function(df){  # Creating a function to plot all variables vs birth weight
plotlist <- list()  # Initiating the list that will contain plots
count <- 1  # Counter for list indexing
for(c in colnames(df)){  # Iterating over variables names
if(c != "bwt"){
if(is.numeric(df[1,c])){  # If the variable is numeric, make a scatterplot
plotlist[[count]] <-ggplot(data=df)+
geom_point(aes_string(x=df[,c],y=df$bwt))+  # aes_string instead of aes to prevent erasing of values at last iteration
theme_bw()+xlab(c)+ylab("Birth weight")
} else{  # If the variable is a factor, make a boxplot
plotlist[[count]] <-ggplot(data=df)+
geom_boxplot(aes_string(x=df[,c],y=df$bwt))+
theme_bw()+xlab(c)+ylab("Birth weight")
}
count <- count + 1
}
}
return(plotlist)
}
grid.arrange(grobs=birth_plotter(birth_weight),ncol=2)
median(birth_weight$bwt[birth_weight$smoke=="SMOKE"])
median(birth_weight$bwt[birth_weight$smoke=="NOSMOKE"])
median(birth_weight$bwt[birth_weight$ptd=="PPREM"])
median(birth_weight$bwt[birth_weight$ptd=="NOPPREM"])
View(birth_weight)
birth_weight<-read.table("birtweigth_study.txt", sep= " ")
row.names(birth_weight) <- NULL
birth_weight$lwt <- birth_weight$lwt*0.45359237
birth_weight$bwt <- birth_weight$bwt/1000
shapiro.test(birth_weight$bwt)
qqnorm(birth_weight$bwt)
qqline(birth_weight$bwt)
anova(lm(bwt ~ age+lwt+ht+smoke+ptd,birth_weight))
anova(lm(bwt ~ ht*smoke*lwt*ptd*age,birth_weight))
lm(bwt ~ ht*smoke*lwt*ptd*age,birth_weight)
qqnorm(birth_weight$bwt)
```{r setup, include=F}
library(ggplot2);library(gridExtra)
birth_weight<-read.table("birtweigth_study.txt", sep= " ") # data is separated by spaces (even though the format was originally csv)
row.names(birth_weight) <- NULL  # Resetting row names
birth_weight$lwt <- birth_weight$lwt*0.45359237  # Converting from pounds to kg
birth_weight$bwt <- birth_weight$bwt/1000  # Converting from grams to kg
nice_varnames <- c(age = "age [years]", lwt="weight of mother [kg]", bwt="birth weigh [kg]t",ht="known hypertension", ptd="preterm birth", smoke = "smoking mother")
birth_plotter <- function(df){  # Creating a function to plot all variables vs birth weight
plotlist <- list()  # Initiating the list that will contain plots
count <- 1  # Counter for list indexing
for(c in colnames(df)){  # Iterating over variables names
if(c != "bwt"){
if(is.numeric(df[1,c])){  # If the variable is numeric, make a scatterplot
plotlist[[count]] <-ggplot(data=df)+
geom_point(aes_string(x=df[,c],y=df$bwt))+  # aes_string instead of aes to prevent erasing of values at last iteration
theme_bw()+xlab(nice_varnames[c])+ylab("Birth weight")+
ggtitle(paste("Newborn weight [kg] VS", nice_varnames[c]))+
theme(plot.title=element_text(size = 12, face="bold"))
} else{  # If the variable is a factor, make a boxplot
plotlist[[count]] <-ggplot(data=df)+
geom_boxplot(aes_string(x=df[,c],y=df$bwt))+
theme_bw()+xlab(nice_varnames[c])+ylab("Birth weight")+
ggtitle(paste("Newborn weight [kg] VS", nice_varnames[c]))+
theme(plot.title=element_text(size = 12, face="bold"))
}
count <- count + 1
}
}
return(plotlist)
}
```
Visualising the date reveals that premature babies are heavier than the others (Figure 1). These results are surprising and should be interpreted with caution as there may be a mistake in the data. The factor levels may for example have been switched.
If we consider the data to be valid anyway and analyze it, we can build a linear model and perform an ANOVA on it, as the data is normally distributed (Figure 2).
```{r dataviz,echo=F, fig.height= 8, fig.width=8}
grid.arrange(grobs=birth_plotter(birth_weight),ncol=2)  # Something is wrong, premature babies are heavier...
```
```{r data_check, echo=F}
qqnorm(birth_weight$bwt)
qqline(birth_weight$bwt)
```
shapiro.test(residuals(lm(bwt ~ ht*smoke*lwt*ptd*age,birth_weight))
shapiro.test(residuals(lm(bwt ~ ht*smoke*lwt*ptd*age,birth_weight)))
shapiro.test(residuals(lm(bwt ~ ht*smoke*lwt*ptd*age,birth_weight)))
shapiro.test(residuals(lm(bwt ~ ht*smoke*lwt*ptd*age,birth_weight)))
shapiro.test(residuals(lm(bwt^2 ~ ht*smoke*lwt*ptd*age,birth_weight)))
plot(lm(bwt ~ ht*smoke*lwt*ptd*age,birth_weight)))
par(mfrow=c(2,2))
plot(lm(bwt ~ ht*smoke*lwt*ptd*age,birth_weight)))
plot(lm(bwt ~ ht*smoke*lwt*ptd*age,birth_weight))
