corplot <- corplot + geom_point(X,Z,col=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
r.coef <- 0
X <- rnorm(mean = 0,1000)
Y <- rnorm(mean=0,1000)
mycol <- heat.colors(20,alpha=0.5)
c <- 1
corplot <- ggplot()+geom_point(X,Y)
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(x=X,y=Z,col=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
r.coef <- 0
X <- rnorm(mean = 0,1000)
Y <- rnorm(mean=0,1000)
mycol <- heat.colors(20,alpha=0.5)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes(x=X,y=Z,col=mycol[c]))
r.coef <- r.coef + 0.05
c <- c+1
}
corplot
corplot <- ggplot()+geom_point(aes(x=X,y=Y))
corplot
corplot <- corplot + geom_point(aes(x=X,y=Z,col=mycol[c]))
corplot
r.coef <- 0
X <- rnorm(mean = 0,1000)
Y <- rnorm(mean=0,1000)
mycol <- heat.colors(20,alpha=0.5)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes(x=X,y=Z)
r.coef <- r.coef + 0.05
c <- c+1
}
r.coef <- 0
X <- rnorm(mean = 0,1000)
Y <- rnorm(mean=0,1000)
mycol <- heat.colors(20,alpha=0.5)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes(x=X,y=Z))
r.coef <- r.coef + 0.05
c <- c+1
}
corplot
r.coef <- 0
X <- rnorm(mean = 0,1000)
Y <- rnorm(mean=0,1000)
mycol <- heat.colors(20,alpha=0.5)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes(x=X,y=Z,colour=mycol[c]))
r.coef <- r.coef + 0.05
c <- c+1
}
corplot
r.coef <- 0
X <- rnorm(mean = 0,1000)
Y <- rnorm(mean=0,1000)
mycol <- heat.colors(20,alpha=0.5)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes(x=X,y=Z),colour=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
corplot
r.coef <- 0
X <- rnorm(mean = 0,1000)
Y <- rnorm(mean=0,1000)
mycol <- heat.colors(20,alpha=0.5)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes_string(x=X,y=Z),colour=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
corplot
r.coef <- 0
X <- rnorm(mean = 0,1000)
Y <- rnorm(mean=0,1000)
mycol <- heat.colors(40,alpha=0.5)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes_string(x=X,y=Z),colour=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
corplot
r.coef <- 0
X <- rnorm(mean = 0,1000)
Y <- rnorm(mean=0,1000)
mycol <- heat.colors(25,alpha=0.5)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes_string(x=X,y=Z),colour=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
corplot
r.coef <- 0
X <- rnorm(mean = 0,1000)
Y <- rnorm(mean=0,1000)
mycol <- heat.colors(25,alpha=0.5)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))+guide_colorbar(heat.colors(25))
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes_string(x=X,y=Z),colour=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
r.coef <- 0
X <- rnorm(mean = 0,1000)
Y <- rnorm(mean=0,1000)
mycol <- heat.colors(25,alpha=0.8)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes_string(x=X,y=Z),colour=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
corplot
corplot <- corplot+geom_points(aes(x=X,y=Y))
corplot <- corplot+geom_point(aes(x=X,y=Y))
corplot
corplot + theme_bw()
r.coef <- 0
X <- rnorm(mean = 0,100)
Y <- rnorm(mean=0,100)
mycol <- heat.colors(25,alpha=0.8)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes_string(x=X,y=Z),colour=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
corplot + theme_bw()
sd(X)
sd(Z)
sd(Y)
Z <- 0.5*X+sqrt(1-0.5^2)*Y
sd(Z)
r.coef <- 0
X <- rnorm(mean = 0,10000)
Y <- rnorm(mean=0,10000)
mycol <- heat.colors(25,alpha=0.8)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes_string(x=X,y=Z),colour=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
corplot
corplot
r.coef <- 0
X <- rnorm(mean = 0,100)
Y <- rnorm(mean=0,100)
mycol <- heat.colors(25,alpha=0.8)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes_string(x=X,y=Z),colour=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
corplot
corplot+scale_colour_gradient(low=0,high=1
)
corplot+scale_colour_gradient(low=0.1,high=1)
corplot+scale_colour_gradient(low=0.1,high=1,guide = colourbar)
corplot+scale_colour_gradient(low=0.1,high=1,guide = "colourbar")
corplot+scale_colour_gradient(low=0.1,high=1,guide = "colourbar")+guides(colours=T)
corplot+scale_colour_gradient(low=0.1,high=1,guide = "colourbar",space = mycol)
corplot+scale_colour_gradient(low=mycol[0],high=mycol[1],limits=c(0,1),guide = "colourbar")
corplot+scale_colour_gradient(low=mycol[0],high=mycol[20],limits=c(0,1),guide = "colourbar")
corplot+scale_colour_gradient(low=mycol[0],high=mycol[20],limits=c(0,20),guide = "colourbar")
corplot+scale_colour_gradient(low=mycol[1],high=mycol[20],limits=c(0,1),guide = "colourbar")
r.coef <- 0
X <- rnorm(mean = 0,100)
Y <- rnorm(mean=0,100)
mycol <- heat.colors(25,alpha=0.8)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))
+scale_colour_gradient(low=mycol[1],high=mycol[20],limits=c(0,1),guide = "colourbar")
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes_string(x=X,y=Z),colour=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
corplot
r.coef <- 0
X <- rnorm(mean = 0,100)
Y <- rnorm(mean=0,100)
mycol <- heat.colors(25,alpha=0.8)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))+scale_colour_gradient(low=mycol[1],high=mycol[20],limits=c(0,1),guide = "colourbar")
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes_string(x=X,y=Z),colour=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
corplot
r.coef <- 0
X <- rnorm(mean = 0,100)
Y <- rnorm(mean=0,100)
mycol <- heat.colors(25,alpha=0.8)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))+scale_colour_gradient(low=mycol[1],high=mycol[20],limits=c(0,1),guide = "colourbar",name="2")
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes_string(x=X,y=Z),colour=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
corplot
r.coef <- 0
X <- rnorm(mean = 0,100)
Y <- rnorm(mean=0,100)
mycol <- heat.colors(25,alpha=0.8)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))+scale_colour_gradient(low=mycol[1],high=mycol[20],limits=c(0,1),guide = "colourbar",name=expression(rho))
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes_string(x=X,y=Z),colour=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
corplot
corplot+geom_point(ase(x=X,y=Y))
corplot+geom_point(aes(x=X,y=Y))
r.coef <- 0
X <- rnorm(mean = 0,1000)
Y <- rnorm(mean=0,1000)
mycol <- heat.colors(25,alpha=0.8)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))+scale_colour_gradient(low=mycol[1],high=mycol[20],limits=c(0,1),guide = "colourbar",name=expression(rho))+ggtitle("Inducing various levels of dependence between two datasets")
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes_string(x=X,y=Z),colour=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
corplot+geom_point(aes(x=X,y=Y),col=alpha("black",0.7))
r.coef <- 0
X <- rnorm(mean = 0,100)
Y <- rnorm(mean=0,100)
mycol <- heat.colors(25,alpha=0.8)
c <- 1
corplot <- ggplot()+geom_point(aes(x=X,y=Y))+scale_colour_gradient(low=mycol[1],high=mycol[20],limits=c(0,1),guide = "colourbar",name=expression(rho))+ggtitle("Inducing various levels of dependence between two datasets")
while(r.coef<=1){
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
corplot <- corplot + geom_point(aes_string(x=X,y=Z),colour=mycol[c])
r.coef <- r.coef + 0.05
c <- c+1
}
corplot+geom_point(aes(x=X,y=Y),col=alpha("black",0.7))
corplot+theme_bw()
corplot+geom_point(aes(x=X,y=Y),col=alpha("black",1))+geom_point(aes(x=X,y=Z),col=(alpha("green",1)), pch=4)
corplot+geom_point(aes(x=X,y=Y),col=alpha("black",1),pch=4)+geom_point(aes(x=X,y=Z),col=(alpha("green",1)), pch=4)
corplot+geom_point(aes(x=X,y=Y),col=alpha("black",1),pch=4)+geom_point(aes(x=X,y=Z),col=(alpha("green",1)), pch=5)
corplot+geom_point(aes(x=X,y=Y),col=alpha("black",1),pch=5)+geom_point(aes(x=X,y=Z),col=(alpha("green",1)), pch=5)
corplot+geom_point(aes(x=X,y=Y),col=alpha("blue",1),pch=5)+geom_point(aes(x=X,y=Z),col=(alpha("green",1)), pch=5)
library(ggplot2); library(gridExtra)
extremplot <- ggplot()+geom_point(aes(x=X,y=Y),col=alpha("blue",1),pch=5)+geom_point(aes(x=X,y=Z),col=(alpha("green",1))) pch=5)+theme_bw()
r.coef <- 0
n<-1000
mycol <- heat.colors(20,alpha=0.3)
pvalues_np <- data.frame(rep(NA,n))
pvalues_p <- data.frame(rep(NA,n))
colnames(pvalues_np)=colnames(pvalues_p) <- "0"
c <- 1
for(r in seq(0.05,1,0.05)){pvalues_np[,as.character(r)]<-rep(NA,n)}
for(r in seq(0.05,1,0.05)){pvalues_p[,as.character(r)]<-rep(NA,n)}
while(r.coef<=1){
for(sim in 1:n){
X <- rnorm(mean = 0,100)
Y <- rnorm(mean=0,100)
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
pvalues_np[sim,c] <- t.test(X,Z,paired = F)$p.val
pvalues_p[sim,c] <- t.test(X,Z,paired = T)$p.val
}
r.coef <- r.coef + 0.05
c <- c+1
}
prop_np <- rep(NA,21)
for(p in 1:length(colnames(pvalues_np))){
prop_np[p]<-sum(pvalues_np[,p]<0.05)/length(pvalues_np[,p])
}
prop_p <- rep(NA,21)
for(p in 1:length(colnames(pvalues_p))){
prop_p[p]<-sum(pvalues_p[,p]<0.05)/length(pvalues_p[,p])
}
ggplot(prop_np)+geom_bar()
head(prop_np)
barplot(prop_np)
barplot(prop_np)
barplot(prop_p)
barplot(prop_np)
hline(0.05)
barplot(prop_p)
barplot(prop_np, names= seq(0,1,0.05))
barplot(prop_np, names= seq(0,1,0.05),col=mycol)
barplot(prop_np, names= seq(0,1,0.05),col=mycol)
hline(0.05)
abline(h=0.05)
abline(h=0.05, lty=2)
par(mfrow=c(2,1))
barplot(prop_np, names= seq(0,1,0.05),col=mycol)
abline(h=0.05, lty=2)
barplot(prop_p, names= seq(0,1,0.05), col=mycol)
abline(h=0.05, lty=2)
r.coef <- -1
n<-1000
mycol <- heat.colors(40,alpha=0.3)
pvalues_np <- data.frame(rep(NA,n))
pvalues_p <- data.frame(rep(NA,n))
colnames(pvalues_np)=colnames(pvalues_p) <- "0"
c <- 1
for(r in seq(-1,1,0.05)){pvalues_np[,as.character(r)]<-rep(NA,n)}
for(r in seq(-1,1,0.05)){pvalues_p[,as.character(r)]<-rep(NA,n)}
while(r.coef<=1){
for(sim in 1:n){
X <- rnorm(mean = 0,100)
Y <- rnorm(mean=0,100)
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
pvalues_np[sim,c] <- t.test(X,Z,paired = F)$p.val
pvalues_p[sim,c] <- t.test(X,Z,paired = T)$p.val
}
r.coef <- r.coef + 0.05
c <- c+1
}
View(pvalues_np)
r.coef <- -1
n<-1000
mycol <- heat.colors(40,alpha=0.3)
pvalues_np <- data.frame(rep(NA,n))
pvalues_p <- data.frame(rep(NA,n))
colnames(pvalues_np)=colnames(pvalues_p) <- "-1"
c <- 1
for(r in seq(-0.95,1,0.05)){pvalues_np[,as.character(r)]<-rep(NA,n)}
for(r in seq(-0.95,1,0.05)){pvalues_p[,as.character(r)]<-rep(NA,n)}
while(r.coef<=1){
for(sim in 1:n){
X <- rnorm(mean = 0,100)
Y <- rnorm(mean=0,100)
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
pvalues_np[sim,c] <- t.test(X,Z,paired = F)$p.val
pvalues_p[sim,c] <- t.test(X,Z,paired = T)$p.val
}
r.coef <- r.coef + 0.05
c <- c+1
}
View(pvalues_np)
prop_np <- rep(NA,41)
for(p in 1:length(colnames(pvalues_np))){
prop_np[p]<-sum(pvalues_np[,p]<0.05)/length(pvalues_np[,p])
}
prop_p <- rep(NA,41)
for(p in 1:length(colnames(pvalues_p))){
prop_p[p]<-sum(pvalues_p[,p]<0.05)/length(pvalues_p[,p])
}
barplot(prop_np, names= seq(-1,1,0.05),col=mycol, main="Two-sample t-test", xlab=expression(rho))
barplot(prop_p, names= seq(-1,1,0.05), col=mycol, main="Paired two-sample t-test", xlab=expression(rho))
abline(h=0.05, lty=2)
par(mfrow=c(2,1))
barplot(prop_np, names= seq(-1,1,0.05),col=mycol, main="Two-sample t-test", xlab=expression(rho))
abline(h=0.05, lty=2)
barplot(prop_p, names= seq(-1,1,0.05), col=mycol, main="Paired two-sample t-test", xlab=expression(rho))
abline(h=0.05, lty=2)
par(mfrow=c(2,1))
barplot(prop_np, names= seq(-1,1,0.05),col=mycol, main="Two-sample t-test", xlab=expression(rho), ylab="prop. p<0.05")
abline(h=0.05, lty=2)
barplot(prop_p, names= seq(-1,1,0.05), col=mycol, main="Paired two-sample t-test", xlab=expression(rho), ylab="prop. p<0.05")
abline(h=0.05, lty=2)
cm
image(cm)
show(mc)
show(cm)
pie(cm)
cm.colors()
r.coef <- -1
n<-1000
mycol <- heat.colors(40,alpha=0.3)
pvalues_np <- data.frame(rep(NA,n))
pvalues_p <- data.frame(rep(NA,n))
colnames(pvalues_np)=colnames(pvalues_p) <- "-1"
c <- 1
for(r in seq(-0.95,1,0.05)){pvalues_np[,as.character(r)]<-rep(NA,n)}
for(r in seq(-0.95,1,0.05)){pvalues_p[,as.character(r)]<-rep(NA,n)}
View(pvalues_np)
seq(-0.95,1,0.05)
round(seq(-0.95,1,0.05),2)
r.coef <- -1
n<-1000
mycol <- heat.colors(40,alpha=0.3)
pvalues_np <- data.frame(rep(NA,n))
pvalues_p <- data.frame(rep(NA,n))
colnames(pvalues_np)=colnames(pvalues_p) <- "-1"
View(pvalues_np)
c <- 1
for(r in round(seq(-0.95,1,0.05),2)){pvalues_np[,as.character(r)]<-rep(NA,n)}
for(r in round(seq(-0.95,1,0.05),2)){pvalues_p[,as.character(r)]<-rep(NA,n)}
View(pvalues_np)
while(r.coef<=1){
for(sim in 1:n){
X <- rnorm(mean = 0,100)
Y <- rnorm(mean=0,100)
Z <- r.coef*X+sqrt(1-r.coef^2)*Y
pvalues_np[sim,c] <- t.test(X,Z,paired = F)$p.val
pvalues_p[sim,c] <- t.test(X,Z,paired = T)$p.val
}
r.coef <- r.coef + 0.05
c <- c+1
}
prop_np <- rep(NA,41)
for(p in 1:length(colnames(pvalues_np))){
prop_np[p]<-sum(pvalues_np[,p]<0.05)/length(pvalues_np[,p])
}
prop_p <- rep(NA,41)
for(p in 1:length(colnames(pvalues_p))){
prop_p[p]<-sum(pvalues_p[,p]<0.05)/length(pvalues_p[,p])
}
par(mfrow=c(2,1))
barplot(prop_np, names= seq(-1,1,0.05),col=cm.colors(41), main="Two-sample t-test", xlab=expression(rho), ylab="prop. p<0.05")
abline(h=0.05, lty=2)
barplot(prop_p, names= seq(-1,1,0.05), col=cm.colors(41), main="Paired two-sample t-test", xlab=expression(rho), ylab="prop. p<0.05")
abline(h=0.05, lty=2)
library(ggplot2); library(gridExtra);library(parallel); library(snow)
n.cores <- parallel:::detectCores() # Probing number of cores available
n.cores <- parallel:::detectCores()-1 # Probing number of cores available
showConnections()
library(ggplot2); library(gridExtra);library(parallel); library(snow)
n.cores <- parallel:::detectCores() # Probing number of cores available
n <- 10000  # Number of simulations required
clus <- makeSOCKcluster( n.cores  )  # Creating cluster
on.exit( stopCluster(clus) )  # Stop the cluster when simulation is finished
dep_sim <- function(r.coef){  # Function generating every iteration of the simulation
X <- rnorm(mean=0, 100)  # Generating first dataset
Y <- rnorm(mean=0, 100)  # Generating second dataset
Z <- r.coef*X+sqrt(1-r.coef^2)*Y  # Making second dataset correlated to first
return(c(t.test(X,Z,paired=F)$p.val,t.test(X,Z,paired=T)$p.val))  # Extracting p-values
}
rep_sim <- function(r){  # replicates simulation n times and extracts proportion of p<0.05 at the end
Rep <- replicate(n,dep_sim(r))  # Replicating simulation n times
out <- list()
out[["NP"]] <- sum(Rep[1,]<0.05)/length(Rep[1,])  # Proportion of false positives with two-samples t-test
out[["P"]] <- sum(Rep[2,]<0.05)/length(Rep[2,])  # Proportion of false positives with paired two-samples t-test
return(out)
}
clusterExport(clus, c("dep_sim","n"), envir=environment())  # exporting variables and functions to nodes
showConnections()
showConnections()
stopCluster(clus)
showConnections()
registerDoParallel(cl)
install.packages("doParallel")
registerDoParallel(clus)
library(doParallel)
registerDoParallel(clus)
showConnections()
r.coef <- 0  # Starting value of correlation coefficient
X <- rnorm(mean = 0,100)  # Fixed data-set
Y <- rnorm(mean=0,100)  # Dependent dataset
Z <- 0.95*X+sqrt(1-0.95^2)*Y  # Generating dependence between datasets
extremplot <- ggplot()+geom_point(aes(x=X,y=Y),col=alpha("blue",1),pch=5)+geom_point(aes(x=X,y=Z),col=(alpha("green",1)), pch=5)+theme_bw()  # Second plot to visualize both datasets with minimum and maximal dependence
grid.arrange(corplot, extremplot, ncol=1)
library(ggplot2); library(gridExtra);library(parallel)
r.coef <- 0  # Starting value of correlation coefficient
X <- rnorm(mean = 0,100)  # Fixed data-set
Y <- rnorm(mean=0,100)  # Dependent dataset
Z <- 0.95*X+sqrt(1-0.95^2)*Y  # Generating dependence between datasets
extremplot <- ggplot()+geom_point(aes(x=X,y=Y),col=alpha("blue",1),pch=5)+geom_point(aes(x=X,y=Z),col=(alpha("green",1)), pch=5)+theme_bw()  # Second plot to visualize both datasets with minimum and maximal dependence
grid.arrange(corplot, extremplot, ncol=1)
ggplot()+geom_point(aes(x=X,y=Y),col=alpha("blue",1),pch=5)+geom_point(aes(x=X,y=Z),col=(alpha("green",1)), pch=5)+theme_bw()  # Second plot to visualize both datasets with minimum and maximal dependence
r.coef <- 0  # Starting value of correlation coefficient
X <- rnorm(mean = 0,100)  # Fixed data-set
Y <- rnorm(mean=0,100)  # Dependent dataset
Z <- 0.95*X+sqrt(1-0.95^2)*Y  # Generating dependence between datasets
ggplot()+geom_point(aes(x=X,y=Y),col=alpha("blue",1),pch=5)+geom_point(aes(x=X,y=Z),col=(alpha("green",1)), pch=5)+theme_bw()  # Second plot to visualize both datasets with minimum and maximal dependence
